@page "/gamefield"
@implements IDisposable

@if (!initialized)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    @if (gameOver)
    {
        @if (gameWin)
        {
            <div class="alert alert-success" role="alert">
                Game over - You won!
            </div>
        }
        else 
        {
            <div class="alert alert-danger" role="alert">
                Game over - You lost!
            </div>
        }
    }
    else 
    {
        <div class="alert alert-success" role="alert">
            @GameClassificationString in progress @clock
        </div>
    }
    <div class="grid @GetAdditionalGridClass()">
        @foreach (var square in _shuffledSquares)
        {
            <div id="@square.Id" class="@square.Class" @onclick="(() => OnClick(square))" @oncontextmenu="(() => OnRightClick(square))" @oncontextmenu:preventDefault="true">
                @if(square.IsRevealed && square.Type == GameGridSquareType.Number && square.AdjacentMineCount > 0)
                {
                    <div>@square.AdjacentMineCount</div>
                }
            </div>
        }
    </div>
    <div>Flags left: <span>@FlagsLeft</span></div>

    <div class="buttonRow">
        <button class="btn btn-primary" @onclick="(() => ResetGame())">Reset Game</button>
    </div>
}

@code {
    [Parameter] public int TotalMines { get; set; } = 20;
    private int _totalMines = 20;

    [Parameter] public int GridWidth { get; set; } = 10;
    private int _gridWidth = 10;

    [Parameter] public int GridHeight { get; set; } = 10;
    private int _gridHeight = 10;
    [Parameter] public GameType GameType { get; set; }
    private GameType _gameType;

    bool gameOver = false;
    bool gameWin = false;
    bool initialized = false;
    Timer? clockTimer;

    private List<GameGridSquare> _shuffledSquares = new List<GameGridSquare>();

    private int usedFlags = 0;
    private int FlagsLeft { get { return (TotalMines != 0) ? TotalMines - usedFlags : 0; } }
    private int TotalSquares { get { return (GridWidth != 0) ? GridWidth * GridHeight : 0; } }
    private int ReveledSquares { get { return _shuffledSquares.Where(x => x.IsRevealed).Count(); } }
    private string GameClassificationString { get { return TotalMines == 10 ? "Easy game" : TotalMines == 20 ? "Medium game" : "Hard game"; } }
    private string clock = "00:00:00";
    private DateTime startTime = DateTime.Now;

    // methods
    void IDisposable.Dispose()
    {
        clockTimer?.Dispose();
        clockTimer = null;
    }

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        // Shuffle the squares
        ResetGame();

        Console.WriteLine("Gamefield initialized");

        @* foreach (var square in _shuffledSquares)
        {
            Console.WriteLine($"{square.Id}: {square.Type}, class: {square.Class}");
        } *@

        initialized = true;
    }

    private string GetAdditionalGridClass()
    {
        if (_gameType == GameType.Easy)
        {
            return "";
        }
        if (_gameType == GameType.Medium)
        {
            return "medium";
        }
        if (_gameType == GameType.Hard)
        {
            return "hard";
        }
        return "";
    }
    public void ResetGame()
    {
        gameOver = false;
        gameWin = false;

        usedFlags = 0;

        _shuffledSquares = GetShuffledSquareList(TotalMines, TotalSquares);

        foreach (var square in _shuffledSquares)
        {
            square.IsRevealed = false;
            square.IsFlagged = false;
            square.IsChecked = false;
            square.AdjacentMineCount = 0;
        }

        // Count adjacent mines
        CountAdjacentMines(_shuffledSquares, GridWidth);
        startTime = DateTime.Now;
        clockTimer = new System.Threading.Timer((_) =>
        {
            UpdateClock();
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }, null, 0, 250);        
    }

    private List<GameGridSquare> GetShuffledSquareList(int totalMines, int totalSquares)
    {
        Console.WriteLine("--- GetShuffledSquareList ---------------------------------------------------------------");
        Console.WriteLine($"TotalMines: {totalMines}, TotalSquares: {totalSquares}");

        List<GameGridSquare> list = new List<GameGridSquare>();
        
        // Initialize the mines
        for (int i = 0; i < totalMines; i++)
        {
            list.Add(new GameGridSquare() { Id = list.Count, Type = GameGridSquareType.Mine, IsRevealed = false });
        }
        // Initialize the squares
        for (int i = 0; i < totalSquares - totalMines; i++)
        {
            list.Add(new GameGridSquare() { Id = list.Count, Type = GameGridSquareType.Empty, IsRevealed = false });
        }

        list = list.OrderBy(x => Guid.NewGuid()).ToList();
        foreach (var square in list)
        {
            square.Id = list.IndexOf(square);
        }
        return list;
    }

    private void CountAdjacentMines(List<GameGridSquare> gridSquares, int gridWidth)
    {
        foreach (var square in gridSquares)
        {
            int adjacentMines = 0;
            if (square.Type == GameGridSquareType.Mine)
            {
                continue;
            }
            // check left
            if (square.Id % gridWidth != 0)
            {
                if (gridSquares[square.Id - 1].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            // check right
            if (square.Id % gridWidth != gridWidth - 1)
            {
                if (gridSquares[square.Id + 1].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            // check top
            if (square.Id >= gridWidth)
            {
                if (gridSquares[square.Id - gridWidth].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            // check bottom
            if (square.Id < gridSquares.Count - gridWidth)
            {
                if (gridSquares[square.Id + gridWidth].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            // check top left
            if (square.Id % gridWidth != 0 && square.Id >= gridWidth)
            {
                if (gridSquares[square.Id - gridWidth - 1].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            // check top right
            if (square.Id % gridWidth != gridWidth - 1 && square.Id >= gridWidth)
            {
                if (gridSquares[square.Id - gridWidth + 1].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            // check bottom left
            if (square.Id % gridWidth != 0 && square.Id < gridSquares.Count - gridWidth)
            {
                if (gridSquares[square.Id + gridWidth - 1].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            // check bottom right
            if (square.Id % gridWidth != gridWidth - 1 && square.Id < gridSquares.Count - gridWidth)
            {
                if (gridSquares[square.Id + gridWidth + 1].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            if (adjacentMines > 0)
            {
                square.Type = GameGridSquareType.Number;
                square.AdjacentMineCount = adjacentMines;
            }
        }
    }

    private void CheckNeighbours(GameGridSquare square, List<GameGridSquare> gridSquares, int gridWidth)
    {
        Console.WriteLine($"Check neighbours: square: ID {square.Id} Type: {square.Type} AdjCount: {square.AdjacentMineCount} Isrevealed: {square.IsRevealed}");

        // check left
        if (square.Id % gridWidth != 0)
        {
            OnClick(gridSquares[square.Id - 1]);
        }
        // check right
        if (square.Id % gridWidth != gridWidth - 1)
        {
            OnClick(gridSquares[square.Id + 1]);
        }
        // check top
        if (square.Id >= gridWidth)
        {
            OnClick(gridSquares[square.Id - gridWidth]);
        }
        // check bottom
        if (square.Id < gridSquares.Count - gridWidth)
        {
            OnClick(gridSquares[square.Id + gridWidth]);
        }
        // check top left
        if (square.Id % gridWidth != 0 && square.Id >= gridWidth)
        {
            OnClick(gridSquares[square.Id - gridWidth - 1]);
        }
        // check top right
        if (square.Id % gridWidth != gridWidth - 1 && square.Id >= gridWidth)
        {
            OnClick(gridSquares[square.Id - gridWidth + 1]);
        }
        // check bottom left
        if (square.Id % gridWidth != 0 && square.Id < gridSquares.Count - gridWidth)
        {
            OnClick(gridSquares[square.Id + gridWidth - 1]);
        }
        // check bottom right
        if (square.Id % gridWidth != gridWidth - 1 && square.Id < gridSquares.Count - gridWidth)
        {
            OnClick(gridSquares[square.Id + gridWidth + 1]);
        }
    }

    private void EndGame(bool win)
    {
        gameOver = true;
        gameWin = win;
        foreach (var item in _shuffledSquares)
        {
            item.IsRevealed = true;
        }
        clockTimer?.Dispose();
        clockTimer = null;
    }

    private void OnClick(GameGridSquare square)
    {
        if (square.IsRevealed || square.IsFlagged ||Â square.IsChecked || gameOver)
        {
            return;
        }

        square.IsRevealed = true;
        Console.WriteLine($"OnClick: square: ID {square.Id} Type: {square.Type} AdjCount: {square.AdjacentMineCount} Isrevealed: {square.IsRevealed}");

        if (square.Type == GameGridSquareType.Mine)
        {
            EndGame(false);
            return;
        }
        if (ReveledSquares == TotalSquares - TotalMines)
        {
            EndGame(true);
            return;
        }

        if (square.Type == GameGridSquareType.Empty)
        {
            CheckNeighbours(square, _shuffledSquares, GridWidth);
        }
    }

    private void OnRightClick(GameGridSquare square)
    {
        if (square.IsRevealed || gameOver)
        {
            return;
        }

        if (!square.IsFlagged /*&& !square.IsChecked*/ && usedFlags < TotalMines)
        {
            square.IsFlagged = true;
            usedFlags++;
        }
        else if (square.IsFlagged)
        {
            square.IsFlagged = false;
            //square.IsChecked = true;
            usedFlags--;
        }
        else
        {
            square.IsFlagged = false;
            square.IsChecked = false;
        }
    }

    private string GameClassification()
    {
        if (TotalSquares == 0)
        {
            return "No game";
        }

        if (TotalMines / TotalSquares <= 0.1)
        {
            return "Easy game";
        }
        else if (TotalMines / TotalSquares <= 0.2)
        {
            return "Medium game";
        }
        else
        {
            return "Hard game";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_gridWidth != GridWidth)
        {
            Console.WriteLine("--- OnParametersSetAsync ----------------------------------------------------------------");
            Console.WriteLine($"GridWidth: {_gridWidth}, GridHeight: {_gridHeight}, TotalMines: {_totalMines}");
            ResetGame();
        }

         if (_gridHeight != GridHeight)
        {
            Console.WriteLine("--- OnParametersSetAsync ----------------------------------------------------------------");
            Console.WriteLine($"GridWidth: {_gridWidth}, GridHeight: {_gridHeight}, TotalMines: {_totalMines}, GameType: {_gameType}");
            _gridHeight = GridHeight;
            ResetGame();
        }

        if (_totalMines != TotalMines)
        {
            Console.WriteLine("--- OnParametersSetAsync ----------------------------------------------------------------");
            Console.WriteLine($"GridWidth: {_gridWidth}, GridHeight: {_gridHeight}, TotalMines: {_totalMines}, GameType: {_gameType}");
            _totalMines = TotalMines;
            ResetGame();
        }

        if (_gameType != GameType)
        {
            Console.WriteLine("--- OnParametersSetAsync ----------------------------------------------------------------");
            Console.WriteLine($"GridWidth: {_gridWidth}, GridHeight: {_gridHeight}, TotalMines: {_totalMines}, GameType: {_gameType}");
            _gameType = GameType;
        }

        await base.OnParametersSetAsync();
    }


    private void UpdateClock()
    {
        TimeSpan diffTime = DateTime.Now - startTime;
        clock = diffTime.ToString(@"hh\:mm\:ss");
    }
}
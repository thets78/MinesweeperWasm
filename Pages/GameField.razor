@page "/gamefield"
@implements IDisposable


<div class="container">
    <div class="row justify-content-center">
    @if (Game == null)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    }
    else
    {
        <div class="game__grid @GetAdditionalGridClass()" style="@GridStyle()">
        @foreach (var square in _shuffledSquares)
        {
            <div id="@square.Id" class="@square.Class" style="@GridCellStyle()" @onclick="(() => OnClick(square))" @oncontextmenu="(() => OnRightClick(square))" @oncontextmenu:preventDefault="true">
                @if(square.IsRevealed && square.Type == GameGridSquareType.Number && square.AdjacentMineCount > 0)
                {
                    <div style="font-size: calc(max(10px, 1vw));">@square.AdjacentMineCount</div>
                }
            </div>
        }
        </div>
        <div class="row justify-content-center mt-2 mb-2">
        @if(Game?.GameState == GameState.InProgress)
        {
            <div class="col">
                <span class="me-2">Flags left:</span>
                <span class="me-2">@FlagsLeft</span>
            </div>
            <div class="col">
                <span class="me-2">Time:</span>
                <span class="me-2">@clock</span>
            </div>
        }
        </div>
        <div class="row justify-content-center mt-2 mb-2">
        @if(Game?.GameState == GameState.NotStarted)
        {
            <button class="btn col-4 me-2 btn-primary" @onclick="(() => StartGame())">Start Game</button>
        }
        @if (Game?.GameState == GameState.InProgress)
        {
            <button class="btn col-4 me-2 btn-primary" @onclick="(() => StartGame(true))">Reset Game</button>
            <button class="btn col-4 ms-2 btn-danger" @onclick="(() => EndGame(false))">Stop Game</button>
        }
        </div>    
    }
    </div>
        
</div>


@code {
    [Parameter] public Game? Game { get; set; }
    [Parameter] public EventCallback<GameState> OnGameStateChanged { get; set; }
    [Parameter] public EventCallback<Game> OnGameChanged { get; set; }

    private bool gameOver = false;
    private bool gameWin = false;
    private Timer? clockTimer;
    private Guid _gameId;
    private GameState _gameState;

    private List<GameGridSquare> _shuffledSquares = new List<GameGridSquare>();

    private int usedFlags = 0;
    private int FlagsLeft { get { return (Game?.MineCount != 0) ? Game!.MineCount - usedFlags : 0; } }
    private int TotalSquares { get { return (Game?.GridWidth != 0) ? Game!.GridWidth * Game.GridHeight : 0; } }
    private int ReveledSquares { get { return _shuffledSquares.Where(x => x.IsRevealed).Count(); } }
    private string clock = "00:00:00";
    private DateTime startTime = DateTime.Now;

    // methods
    void IDisposable.Dispose()
    {
        DisposeTimer();
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Console.WriteLine("Gamefield initialized");
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Game != null && _gameId != Game?.Id )
        {
            Console.WriteLine("--- GameField - OnParametersSetAsync ----------------------------------------------------");
            Console.WriteLine($"Game setup: GUID: {Game!.Id}");
            Console.WriteLine($"Game setup: GameType: {Game!.GameType}, GridWidth: {Game!.GridWidth}, GridHeight: {Game!.GridHeight}, TotalMines: {Game!.MineCount}");
            _gameId = Game.Id;
            _gameState = GameState.NotStarted;
            PrepareGame(Game.GameType);
            if (_gameState == GameState.NotStarted && Game.GameState == GameState.RequestStart)
            {
                await StartGame();
                return;
            }
        }
        if (Game != null && _gameState != Game.GameState && _gameId == Game.Id)
        {
            Console.WriteLine("--- GameField - OnParametersSetAsync ----------------------------------------------------");
            Console.WriteLine($"Game state changed: GUID: {Game!.Id} GameState: {_gameState} -> {Game.GameState}");
            
            if (_gameState == GameState.NotStarted && Game.GameState == GameState.RequestStart)
            {
                await StartGame();
                return;
            }
            _gameState = Game.GameState;
        }
    }

    private string GridStyle()
    {
        return $"width: {Game?.GridWidth * 2}vw; height: {Game?.GridHeight * 2}vw; min-width: {Game?.GridWidth * 18}px; min-height: {Game?.GridHeight * 18}px;";
    }

    private string GridCellStyle()
    {
        return $"width: 2vw; height: 2vw; min-width: 18px; min-height: 18px;";
    }

    private string GetAdditionalGridClass()
    {
        if (Game?.GameType == GameType.Easy)
        {
            return $"";
        }
        if (Game?.GameType == GameType.Medium)
        {
            return "medium";
        }
        if (Game?.GameType == GameType.Hard)
        {
            return "hard";
        }
        return "";
    }

    public void PrepareGame(GameType gameType)
    {
        Console.WriteLine("--- GameField - PrepareGame -------------------------------------------------------------");
        gameOver = false;
        gameWin = false;

        usedFlags = 0;
        _shuffledSquares = GetShuffledSquareList(Game!.MineCount, TotalSquares);

        foreach (var square in _shuffledSquares)
        {
            square.IsRevealed = false;
            square.IsFlagged = false;
            square.IsChecked = false;
            square.AdjacentMineCount = 0;
        }
        // Count adjacent mines
        CountAdjacentMines(_shuffledSquares, Game!.GridWidth);
    }

    private async Task StartGame(bool restart = false)
    {
        Console.WriteLine("--- GameField - StartGame ---------------------------------------------------------------");
        if (restart)
        {
            Console.WriteLine("Game restarted -> PrepareGame");
            PrepareGame(Game!.GameType);
        }
        Console.WriteLine($"Game started: GameType: {Game?.GameType}, GridWidth: {Game?.GridWidth}, GridHeight: {Game?.GridHeight}, TotalMines: {Game?.MineCount}");

        startTime = DateTime.Now;
        clockTimer = new System.Threading.Timer((_) =>
        {
            UpdateClock();
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }, null, 0, 250);

        await OnGameStateChanged.InvokeAsync(GameState.InProgress);
    }
    private async Task EndGame(bool win)
    {
        Console.WriteLine("--- GameField - EndGame -----------------------------------------------------------------");
        Console.WriteLine($"Game ended: GameType: {Game?.GameType}, GridWidth: {Game?.GridWidth}, GridHeight: {Game?.GridHeight}, TotalMines: {Game?.MineCount}, Win: {win}");
        gameOver = true;
        gameWin = win;

        Game!.GameState = win ? GameState.Won : GameState.Lost;
        Game!.Time = DateTime.Now - startTime;

        foreach (var item in _shuffledSquares)
        {
            item.IsRevealed = true;
        }
        DisposeTimer();

        await OnGameChanged.InvokeAsync(Game);
    }

    public void DisposeTimer()
    {
        Console.WriteLine("--- GameField - DisposeTimer ------------------------------------------------------------");
        clockTimer?.Dispose();
        clockTimer = null;
    }

    private List<GameGridSquare> GetShuffledSquareList(int totalMines, int totalSquares)
    {
        Console.WriteLine("--- GameField - GetShuffledSquareList ---------------------------------------------------");
        Console.WriteLine($"TotalMines: {totalMines}, TotalSquares: {totalSquares}");

        List<GameGridSquare> list = new List<GameGridSquare>();
        
        // Initialize the mines
        for (int i = 0; i < totalMines; i++)
        {
            list.Add(new GameGridSquare() { Id = list.Count, Type = GameGridSquareType.Mine, IsRevealed = false });
        }
        // Initialize the squares
        for (int i = 0; i < totalSquares - totalMines; i++)
        {
            list.Add(new GameGridSquare() { Id = list.Count, Type = GameGridSquareType.Empty, IsRevealed = false });
        }

        list = list.OrderBy(x => Guid.NewGuid()).ToList();
        foreach (var square in list)
        {
            square.Id = list.IndexOf(square);
        }
        return list;
    }

    private void CountAdjacentMines(List<GameGridSquare> gridSquares, int gridWidth)
    {
        foreach (var square in gridSquares)
        {
            int adjacentMines = 0;
            if (square.Type == GameGridSquareType.Mine)
            {
                continue;
            }
            // check left
            if (square.Id % gridWidth != 0)
            {
                if (gridSquares[square.Id - 1].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            // check right
            if (square.Id % gridWidth != gridWidth - 1)
            {
                if (gridSquares[square.Id + 1].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            // check top
            if (square.Id >= gridWidth)
            {
                if (gridSquares[square.Id - gridWidth].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            // check bottom
            if (square.Id < gridSquares.Count - gridWidth)
            {
                if (gridSquares[square.Id + gridWidth].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            // check top left
            if (square.Id % gridWidth != 0 && square.Id >= gridWidth)
            {
                if (gridSquares[square.Id - gridWidth - 1].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            // check top right
            if (square.Id % gridWidth != gridWidth - 1 && square.Id >= gridWidth)
            {
                if (gridSquares[square.Id - gridWidth + 1].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            // check bottom left
            if (square.Id % gridWidth != 0 && square.Id < gridSquares.Count - gridWidth)
            {
                if (gridSquares[square.Id + gridWidth - 1].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            // check bottom right
            if (square.Id % gridWidth != gridWidth - 1 && square.Id < gridSquares.Count - gridWidth)
            {
                if (gridSquares[square.Id + gridWidth + 1].Type == GameGridSquareType.Mine)
                {
                    adjacentMines++;
                }
            }
            if (adjacentMines > 0)
            {
                square.Type = GameGridSquareType.Number;
                square.AdjacentMineCount = adjacentMines;
            }
        }
    }

    private async Task CheckNeighbors(GameGridSquare square, List<GameGridSquare> gridSquares, int gridWidth)
    {
        // check left
        if (square.Id % gridWidth != 0)
        {
            await OnClick(gridSquares[square.Id - 1]);
        }
        // check right
        if (square.Id % gridWidth != gridWidth - 1)
        {
            await OnClick(gridSquares[square.Id + 1]);
        }
        // check top
        if (square.Id >= gridWidth)
        {
            await OnClick(gridSquares[square.Id - gridWidth]);
        }
        // check bottom
        if (square.Id < gridSquares.Count - gridWidth)
        {
            await OnClick(gridSquares[square.Id + gridWidth]);
        }
        // check top left
        if (square.Id % gridWidth != 0 && square.Id >= gridWidth)
        {
            await OnClick(gridSquares[square.Id - gridWidth - 1]);
        }
        // check top right
        if (square.Id % gridWidth != gridWidth - 1 && square.Id >= gridWidth)
        {
            await OnClick(gridSquares[square.Id - gridWidth + 1]);
        }
        // check bottom left
        if (square.Id % gridWidth != 0 && square.Id < gridSquares.Count - gridWidth)
        {
            await OnClick(gridSquares[square.Id + gridWidth - 1]);
        }
        // check bottom right
        if (square.Id % gridWidth != gridWidth - 1 && square.Id < gridSquares.Count - gridWidth)
        {
            await OnClick(gridSquares[square.Id + gridWidth + 1]);
        }
    }


    private async Task OnClick(GameGridSquare square)
    {
        if (Game?.GameState != GameState.InProgress)
        {
            return;
        }

        if (square.IsRevealed || square.IsFlagged || square.IsChecked || gameOver)
        {
            return;
        }

        square.IsRevealed = true;
        Console.WriteLine($"OnClick: square: ID {square.Id} Type: {square.Type} AdjCount: {square.AdjacentMineCount} IsRevealed: {square.IsRevealed}");

        if (square.Type == GameGridSquareType.Mine)
        {
            await EndGame(false);
            return;
        }
        if (ReveledSquares == TotalSquares - Game!.MineCount)
        {
            await EndGame(true);
            return;
        }

        if (square.Type == GameGridSquareType.Empty)
        {
            await CheckNeighbors(square, _shuffledSquares, Game!.GridWidth);
        }
    }

    private void OnRightClick(GameGridSquare square)
    {
        if (square.IsRevealed || gameOver)
        {
            return;
        }

        if (!square.IsFlagged /*&& !square.IsChecked*/ && usedFlags < Game?.MineCount)
        {
            square.IsFlagged = true;
            usedFlags++;
        }
        else if (square.IsFlagged)
        {
            square.IsFlagged = false;
            //square.IsChecked = true;
            usedFlags--;
        }
        else
        {
            square.IsFlagged = false;
            square.IsChecked = false;
        }
    }

    private string GameClassification()
    {
        if (Game?.GameType == GameType.Easy)
        {
            return "Easy game";
        }
        else if (Game?.GameType == GameType.Medium)
        {
            return "Medium game";
        }
        else if(Game?.GameType == GameType.Hard)
        {
            return "Hard game";
        }

        return "No game";
    }


    private void UpdateClock()
    {
        TimeSpan diffTime = DateTime.Now - startTime;
        clock = diffTime.ToString(@"hh\:mm\:ss");
    }
}
